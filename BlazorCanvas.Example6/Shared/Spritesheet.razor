@using System.Drawing
@using System.Text.Json
@using BlazorCanvas.Example6.Core
@inject HttpClient Http

@foreach (var animation in _animations)
{
    <img hidden src="@animation.ImageData" @ref="animation.ImageRef" data-name="@animation.Name" />
}

@code{
    [Parameter]
    public string Source { get; set; }

    public AnimationsSet Model { get; private set; }

    private IList<AnimationsSet.Animation> _animations = new List<AnimationsSet.Animation>();

    protected override async Task OnInitializedAsync()
    {
        var data = await Http.GetFromJsonAsync<PiskelFile>(this.Source);

        if (data?.piskel?.layers != null)
        {
            var frameSize = new Size(data.piskel.height, data.piskel.width);

            foreach (var jsonLayer in data.piskel.layers)
            {
                var layer = JsonSerializer.Deserialize<PiskelLayer>(jsonLayer);

                if (layer?.chunks?.Length != 0 && !string.IsNullOrWhiteSpace(layer.chunks[0].base64PNG))
                    _animations.Add(new AnimationsSet.Animation(layer.name, data.piskel.fps, 5, frameSize, //TODO: fetch frames count
                                                             new ElementReference(Guid.NewGuid().ToString()), layer.chunks[0].base64PNG, Size.Empty));
            }

            Model = new AnimationsSet(data.piskel.name, _animations);

            await this.OnModelLoaded.InvokeAsync(this.Model);
        }
    }

    [Parameter]
    public EventCallback<AnimationsSet> OnModelLoaded { get; set; }

    private class PiskelData
    {
        public int fps { get; set; }
        public int height { get; set; }
        public int width { get; set; }
        public string name { get; set; }
        public string[] layers { get; set; }
    }

    private class PiskelFile
    {
        public PiskelData piskel { get; set; }
    }

    private class PiskelLayer
    {
        public string name { get; set; }

        public class Chunk
        {
            public string base64PNG { get; set; }
        }
        public Chunk[] chunks { get; set; }
    }
}