@using System.Drawing
@using System.Text.Json
@inject HttpClient Http

@if(null != Model)
{
    foreach (var image in Model.Animations)
    {
        <img hidden src="@image.ImageData" @ref="image.ImageRef" data-name="@image.Name" />
    }
}

@code{
    [Parameter]
    public string Source { get; set; }

    public AnimationsSet Model { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        var data = await Http.GetFromJsonAsync<PiskelFile>(this.Source);

        if (null == data?.piskel)
            return;

        if (null != data.piskel?.layers)
        {
            var animations = new List<AnimationsSet.Animation>();

            foreach (var jsonLayer in data.piskel.layers)
            {
                var layer = JsonSerializer.Deserialize<PiskelLayer>(jsonLayer);

                if (layer?.chunks?.Length != 0 && !string.IsNullOrWhiteSpace(layer.chunks[0].base64PNG))
                    animations.Add(new AnimationsSet.Animation(layer.name, new ElementReference(Guid.NewGuid().ToString()), layer.chunks[0].base64PNG ));
            }

            Model = new AnimationsSet(data.piskel.name, data.piskel.fps, new Size(data.piskel.height, data.piskel.width), animations);
        }
    }

    private class PiskelData
    {
        public int fps { get; set; }
        public int height { get; set; }
        public int width { get; set; }
        public string name { get; set; }
        public string[] layers { get; set; }
    }

    private class PiskelFile
    {
        public int modelVersion { get; set; }
        public PiskelData piskel { get; set; }
    }

    private class PiskelLayer
    {
        public string name { get; set; }

        public class Chunk
        {
            public string base64PNG { get; set; }
        }
        public Chunk[] chunks { get; set; }
    }

    public class AnimationsSet
    {
        public AnimationsSet(string name, int fps, Size size, IEnumerable<Animation> animations)
        {
            this.Fps = fps;
            this.Size = size;
            this.Name = name;
            this.Animations = animations ?? Enumerable.Empty<Animation>();
        }

        public int Fps { get; }
        public Size Size { get; }
        public string Name { get; }
        public IEnumerable<Animation> Animations { get; }

        public class Animation
        {
            public Animation(string name, ElementReference imageRef, string imageData)
            {
                Name = name;
                ImageRef = imageRef;
                ImageData = imageData;
            }

            public string Name { get; }
            public ElementReference ImageRef { get; set; }
            public string ImageData { get; }
        }
    }
}