@page "/"
@using System.Drawing
@using Blazor.Extensions
@using BlazorCanvas.Example9.Core
@using BlazorCanvas.Example9.Core.Animations

@inject IJSRuntime JsRuntime;

<Spritesheet @ref="_planet1Spritesheet" Source="assets/planet1.json" OnModelLoaded="@InitGame" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    BECanvasComponent _canvas;
    Spritesheet _planet1Spritesheet;

    GameContext _game;

    protected async Task InitGame(AnimationCollection animationCollection)
    {
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
        
        _game = await SceneGraphGame.Create(_canvas, animationCollection);

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));
    }


    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (null == _game) 
            return;
        await _game.Step();
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (null == _game) return;
        _game.Display.Size = new Size(screenWidth, screenHeight);
    }

}
